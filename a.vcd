$date
	Sat Jun 28 21:00:58 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module sccomp_tb $end
$var wire 32 ! reg_data [31:0] $end
$var reg 1 " clk $end
$var reg 5 # reg_sel [4:0] $end
$var reg 1 $ rstn $end
$var integer 32 % counter [31:0] $end
$var integer 32 & debug_output [31:0] $end
$var integer 32 ' foutput [31:0] $end
$var integer 32 ( pc_output [31:0] $end
$scope module U_SCCOMP $end
$var wire 1 " clk $end
$var wire 5 ) reg_sel [4:0] $end
$var wire 1 * rst $end
$var wire 1 $ rstn $end
$var wire 32 + reg_data [31:0] $end
$var wire 32 , instr [31:0] $end
$var wire 32 - dm_dout [31:0] $end
$var wire 32 . dm_din [31:0] $end
$var wire 32 / dm_addr [31:0] $end
$var wire 32 0 PC [31:0] $end
$var wire 1 1 MemWrite $end
$var wire 3 2 DMType [2:0] $end
$scope module U_DM $end
$var wire 9 3 addr [8:0] $end
$var wire 1 " clk $end
$var wire 32 4 din [31:0] $end
$var wire 1 1 DMWr $end
$var wire 3 5 DMType [2:0] $end
$var reg 32 6 dout [31:0] $end
$upscope $end
$scope module U_IM $end
$var wire 30 7 addr [31:2] $end
$var wire 32 8 dout [31:0] $end
$upscope $end
$scope module U_SCPU $end
$var wire 3 9 DMType_out [2:0] $end
$var wire 32 : Data_in [31:0] $end
$var wire 32 ; Data_out [31:0] $end
$var wire 2 < GPRSel [1:0] $end
$var wire 1 = MEM_WB_MemRead $end
$var wire 1 " clk $end
$var wire 32 > inst_in [31:0] $end
$var wire 1 1 mem_w $end
$var wire 5 ? reg_sel [4:0] $end
$var wire 1 * reset $end
$var wire 20 @ uimm [19:0] $end
$var wire 12 A simm [11:0] $end
$var wire 5 B rs2 [4:0] $end
$var wire 5 C rs1 [4:0] $end
$var wire 32 D reg_data [31:0] $end
$var wire 5 E rd [4:0] $end
$var wire 32 F not_used [31:0] $end
$var wire 20 G jimm [19:0] $end
$var wire 32 H jalr_next [31:0] $end
$var wire 32 I immout [31:0] $end
$var wire 5 J iimm_shamt [4:0] $end
$var wire 12 K iimm [11:0] $end
$var wire 12 L bimm [11:0] $end
$var wire 32 M aluout [31:0] $end
$var wire 32 N alu_B_ID [31:0] $end
$var wire 32 O alu_B [31:0] $end
$var wire 1 P Zero $end
$var wire 2 Q WDSel [1:0] $end
$var wire 1 R Stall_ID $end
$var wire 1 S Stall_EX $end
$var wire 2 T Stall [1:0] $end
$var wire 1 U RegWrite $end
$var wire 32 V RD2 [31:0] $end
$var wire 32 W RD1 [31:0] $end
$var wire 32 X PC_out [31:0] $end
$var wire 7 Y Op [6:0] $end
$var wire 3 Z NPCOp [2:0] $end
$var wire 32 [ NPC [31:0] $end
$var wire 1 \ MemWrite $end
$var wire 1 ] MemRead $end
$var wire 12 ^ Imm12 [11:0] $end
$var wire 20 _ IMM [19:0] $end
$var wire 7 ` Funct7 [6:0] $end
$var wire 3 a Funct3 [2:0] $end
$var wire 4 b ForwardB [3:0] $end
$var wire 4 c ForwardA [3:0] $end
$var wire 6 d EXTOp [5:0] $end
$var wire 3 e DMType [2:0] $end
$var wire 1 f Can_Branch $end
$var wire 32 g B [31:0] $end
$var wire 32 h Addr_out [31:0] $end
$var wire 1 i ALUSrc $end
$var wire 5 j ALUOp [4:0] $end
$var reg 32 k ALU_A [31:0] $end
$var reg 32 l ALU_A_Btype [31:0] $end
$var reg 32 m ALU_B [31:0] $end
$var reg 32 n ALU_B_Btype [31:0] $end
$var reg 32 o EX_MEM_ALUResult [31:0] $end
$var reg 3 p EX_MEM_DMType [2:0] $end
$var reg 32 q EX_MEM_Inst [31:0] $end
$var reg 1 r EX_MEM_MemRead $end
$var reg 1 s EX_MEM_MemWrite $end
$var reg 3 t EX_MEM_NPCOp [2:0] $end
$var reg 32 u EX_MEM_PC [31:0] $end
$var reg 32 v EX_MEM_RD2 [31:0] $end
$var reg 1 w EX_MEM_RegWrite $end
$var reg 2 x EX_MEM_WDSel [1:0] $end
$var reg 5 y EX_MEM_rd [4:0] $end
$var reg 1 z EX_MEM_valid $end
$var reg 5 { ID_EX_ALUOp [4:0] $end
$var reg 1 | ID_EX_ALUSrc $end
$var reg 3 } ID_EX_DMType [2:0] $end
$var reg 32 ~ ID_EX_Imm [31:0] $end
$var reg 32 !" ID_EX_Inst [31:0] $end
$var reg 1 "" ID_EX_MemRead $end
$var reg 1 #" ID_EX_MemWrite $end
$var reg 3 $" ID_EX_NPCOp [2:0] $end
$var reg 32 %" ID_EX_PC [31:0] $end
$var reg 32 &" ID_EX_RD1 [31:0] $end
$var reg 32 '" ID_EX_RD2 [31:0] $end
$var reg 1 (" ID_EX_RegWrite $end
$var reg 2 )" ID_EX_WDSel [1:0] $end
$var reg 5 *" ID_EX_rd [4:0] $end
$var reg 5 +" ID_EX_rs1 [4:0] $end
$var reg 5 ," ID_EX_rs2 [4:0] $end
$var reg 1 -" ID_EX_valid $end
$var reg 1 ." IF_Flush $end
$var reg 32 /" IF_ID_Inst [31:0] $end
$var reg 32 0" IF_ID_PC [31:0] $end
$var reg 1 1" IF_ID_valid $end
$var reg 3